The task: Write a prototype of a low-latency queue. The queue should be implemented as a template class that can hold any type of data and should have the following methods: push, pop, front, back, size, empty.

Implement lock-free mechanism for multi-threaded operation with the queue. Ensure that the queue is thread-safe and can handle high-concurrency operations.

Implement exception and error handling functionality that will be called when it is not possible to add/remove an element from the queue due to memory allocation errors or other issues.

Describe expected queue's performance under high-load conditions using multiple threads to add and remove elements simultaneously. Propose how the time taken for each operation and the overall time taken to execute a high number of operations would be measured.

Provide descriptions of the design choices and trade-offs made, and any known limitations of the implementation
